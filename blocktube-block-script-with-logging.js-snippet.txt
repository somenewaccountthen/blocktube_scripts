(video, objectType) => {

  // No video, we are done.
  if (!video)
    return false;

  // Toggles for debug
  const logInfo = true;
  const infoPrefix = '[BLOCKTUBE SCRIPT] ';

  // Toggles for video age
  const hideToday = false;
  const hideDays = true;
  const hideWeek = true;
  const hideWeeks = true;
  const hideMonth = true;
  const hideMonths = true;
  const hideYear = true;
  const hideYears = true;

  // Block narcicssists 
  const hideNarcissists = true;

  // Block exotic char sets (Thai , Indian , etc)
  const unicodeRegExp = /[\u0080-\uFFFF]/g; // Do not touch
  const hideExoticCharChannelsAndTitles = true;
  const maxExoticChars = 1.2;

  // Block one minute ago
  const hideOneminuteAgo = true;

  // Block video based on age; Return true to block a video.
  if (video.publishTimeText) {
    // one Day(s)
    if (hideToday && video.publishTimeText.toLowerCase().includes('hour')) {
      if (logInfo) console.info(infoPrefix, 'Rule: hour              triggered for:', video.publishTimeText);

      return true; // Filter it      
    }

    if (hideToday && video.publishTimeText.toLowerCase().includes('1 day')) {
      if (logInfo) console.info(infoPrefix, 'Rule: 1 day             triggered for:', video.publishTimeText);

      return true; // Filter it      
    }

    // Multiple days
    if (hideDays && video.publishTimeText.toLowerCase().includes('days ago')) {
      if (logInfo) console.info(infoPrefix, 'Rule: days ago          triggered for:', video.publishTimeText);

      return true; // Filter it      
    }

    // Week(s)
    if (hideWeek && video.publishTimeText.toLowerCase().includes('week ago')) {
      if (logInfo) console.info(infoPrefix, 'Rule: week ago          triggered for:', video.publishTimeText);

      return true; // Filter it      
    }

    if (hideWeeks && video.publishTimeText.toLowerCase().includes('weeks ago')) {
      if (logInfo) console.info(infoPrefix, 'Rule: weeks ago         triggered for:', video.publishTimeText);

      return true; // Filter it      
    }

    // Month(s)
    if (hideMonth && video.publishTimeText.toLowerCase().includes('month ago')) {
      if (logInfo) console.info(infoPrefix, 'Rule: month ago         triggered for:', video.publishTimeText);

      return true; // Filter it      
    }

    if (hideMonths && video.publishTimeText.toLowerCase().includes('months ago')) {
      if (logInfo) console.info(infoPrefix, 'Rule: months ago        triggered for:', video.publishTimeText);

      return true; // Filter it      
    }

    // Year(s)
    if (hideYear && video.publishTimeText.toLowerCase().includes('year ago')) {
      if (logInfo) console.info(infoPrefix, 'Rule: year ago          triggered for:', video.publishTimeText);

      return true; // Filter it      
    }

    if (hideYears && video.publishTimeText.toLowerCase().includes('years ago')) {
      if (logInfo) console.info(infoPrefix, 'Rule: years ago         triggered for:', video.publishTimeText);

      return true; // Filter it      
    }
  }

  // Video title starting with "i " are all 
  if (hideNarcissists) {
    if (video.title && (video.title.toLowerCase().startsWith("i "))) {
      if (logInfo) console.info(infoPrefix, 'Rule: Narcissist        triggered for:', video.title);

      return true; // Filter it      
    }
  }

  // Filter Thai, Indian etc channels based on chars used.
  if (hideExoticCharChannelsAndTitles) {
    const titleWithoutUnicode = video.title ? video.title.replace(unicodeRegExp, '') : '';
    const channelNameWithoutUnicode = video.channelName ? video.channelName.replace(unicodeRegExp, '') : '';
    const factorTitle = (video.title && titleWithoutUnicode && (video.title.length / titleWithoutUnicode.length));
    const factorChannelName = (video.channelName && channelNameWithoutUnicode && (video.channelName.length / channelNameWithoutUnicode.length));
    filter_this_out = factorTitle > maxExoticChars || factorChannelName > maxExoticChars;

    if (filter_this_out) {
      if (logInfo) {
        if (factorTitle > maxExoticChars) {
          console.info(infoPrefix, 'Rule: Exotic characters triggered for: "' + video.title + '"');
          console.info(infoPrefix, '               Title without unicode : "' + titleWithoutUnicode + '"');
          console.info(infoPrefix, '                     Factor of title :', factorTitle);
          console.info(infoPrefix, '               Maximum factor exeeded:', factorTitle, '>', maxExoticChars);
        }
        if (factorChannelName > maxExoticChars) {
          console.info(infoPrefix, 'Rule: Exotic characters triggered for: "' + video.channelName + '"');
          console.info(infoPrefix, '        Channel name without unicode : "' + channelNameWithoutUnicode + '"');
          console.info(infoPrefix, '              Factor of Channel Name :', factorChannelName);
          console.info(infoPrefix, '              Maximum factor exceeded:', maxExoticChars, '>', maxExoticChars);
        }
      }

      return true; // Filter it      
    }
  }

  if (hideOneminuteAgo) {
    if (video.title && (video.title.toLowerCase().startsWith("one minute ago") || video.title.toLowerCase().startsWith("1 minute ago"))) {
      if (logInfo) console.info(infoPrefix, 'Rule: One Minute Ago"    triggered for:', video.title);

      return true; // Filter it      
    }
  }
}
